name: Continuous Integration
on:
  pull_request:
  push:
    branches:
      - main
      - release/*
    tags:
      - v*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name != 'pull_request' }}

jobs:
  conformance:
    name: Conformance
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Rust
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-nightly-${{ hashFiles('Cargo.toml') }}
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt, clippy
          override: true

      - name: Line Lint
        uses: fernandrone/linelint@0.0.6
        id: linelint

      - name: Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy (native)
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets -- --deny warnings

  test:
    strategy:
      matrix:
        os:
          - windows-latest
          - macos-latest
          - ubuntu-latest

    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Rust
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-${{ matrix.rust }}-${{ hashFiles('Cargo.toml') }}
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ conformance, test ]

    name: Publish
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Publish
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --token ${REGISTRY_TOKEN}
        env:
          REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
